buildscript {
    ext.kotlin_version = '1.2.41'
    ext.dokka_version = '0.9.15'
    ext.android_support_version = '27.1.1'
    repositories {
        jcenter()
        google()
        maven {  url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:2.1.0"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.triplet.play'

if (!project.hasProperty("storeP12File")) {
    ext.storeP12File = file("/")
}

if (!project.hasProperty("storeServiceAccount")) {
    ext.storeServiceAccount = ""
}


android {
    compileSdkVersion 27
    flavorDimensions "main"

		lintOptions {
				disable 'InvalidPackage', 'MissingTranslation'
		}

    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = storeServiceAccount
            pk12File = file(storeP12File)
        }
    }
    //noinspection GroovyMissingReturnStatement
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }

    defaultConfig {
        versionName '10.1.15'
        versionCode 3091
        multiDexEnabled true
	     minSdkVersion 14
        // target API 23 because anything newer breaks root:// links
        //noinspection OldTargetApi
        targetSdkVersion 23
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }

    productFlavors {
        dropbox {
            dimension "main"
            setApplicationId("nl.mpcjanssen.todotxtholo")
            manifestPlaceholders = [providerFlavour: "dropbox"]
        }
        cloudless {
            dimension "main"
            setApplicationId("nl.mpcjanssen.simpletask")
            manifestPlaceholders = [providerFlavour: "cloudless"]
        }
        nextcloud {
            dimension "main"
            setApplicationId("nl.mpcjanssen.simpletask.nextcloud")
            manifestPlaceholders = [providerFlavour: "nextcloud"]
        }
    }

    signingConfigs {
        release {
            keyAlias = "mpcjanssen.nl"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix = ".debug"
            versionNameSuffix = '-DEBUG'
            manifestPlaceholders = [providerBuildType: "debug"]
        }
        release {
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.release
            setMinifyEnabled(true)
            proguardFile "proguard.txt"
            manifestPlaceholders = [providerBuildType: "release"]
        }
    }
    dexOptions {
        preDexLibraries = true
        javaMaxHeapSize "6g"
        dexInProcess = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    play {
        // ...
        track = 'production' // or 'rollout' or 'beta' or 'alpha'
        userFraction = 1 // only necessary for 'rollout', in this case default is 1 (100% of the target)
        untrackOld = true // supersede any releases on other tracks
        // uploadImages = true // uncomment to upload images using publishListing<Flavour>Release
    }
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven {
        url "https://maven.google.com"
    }
}

dependencies {
    dropboxImplementation 'com.dropbox.core:dropbox-core-sdk:3.0.6'
    nextcloudImplementation 'com.github.nextcloud:android-library:-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.android.support:support-v4:$android_support_version"
    implementation "com.android.support:support-compat:$android_support_version"
    implementation "com.android.support:design:$android_support_version"
    implementation "com.android.support:appcompat-v7:$android_support_version"
    implementation "com.android.support:recyclerview-v7:$android_support_version"
    implementation 'de.greenrobot:greendao:2.1.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.atlassian.commonmark:commonmark:0.8.0'
    implementation 'com.darwinsys:hirondelle-date4j:1.5.1'
    implementation 'org.luaj:luaj-jse:3.0.1'
    implementation 'me.smichel.android:kpreferences:0.11.1'
    implementation 'com.android.support:multidex:1.0.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation('com.android.support.test:runner:0.5') {
        // Necessary if your app targets Marshmallow (since the test runner
        // hasn't moved to Marshmallow yet)
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation('com.android.support.test:rules:0.5') {
        // Necessary if your app targets Marshmallow (since the test runner
        // hasn't moved to Marshmallow yet)
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}



// Only sign if we have keystore properties in the gradle.properties in ~/.gradle
if (project.hasProperty('storeFile') &&
        project.hasProperty('storePassword') &&
        project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = null
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

task cleanPublish(type: GradleBuild) {
    setTasks(["clean", "publishNextcloudRelease", "publishCloudlessRelease", "publishDropboxRelease"])
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
